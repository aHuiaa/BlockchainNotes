
var Web3 = require('web3');
var rp = require('request-promise');

/*************
** 参数配置 **
*************/
var appid = 'wxe2d66948fed96b28';//小程序ID
var secret = '567ad1ef9a59573df3e6539a4480fdd9';//小程序密钥
var adminAddress = '0x9418da32757a958aa43cb415f9edb80a5403007e';//管理员以太坊账户地址，即【adminAddress】
var httpProviderUrl = 'http://localhost:1111';//以太坊节点IP/端口，默认：http://localhost:1111	

var web3 = new Web3(new Web3.providers.HttpProvider(httpProviderUrl));

var jsonInterface = [{"constant":false,"inputs":[{"name":"id","type":"string"},{"name":"date","type":"string"},{"name":"title","type":"string"},{"name":"intro","type":"string"},{"name":"content","type":"string"}],"name":"addNote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"date","type":"string"},{"name":"count","type":"uint256"}],"name":"getNoteList","outputs":[{"components":[{"name":"id","type":"string"},{"name":"title","type":"string"},{"name":"intro","type":"string"},{"name":"content","type":"string"}],"name":"","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"date","type":"string"},{"name":"id","type":"string"}],"name":"getNote","outputs":[{"components":[{"name":"id","type":"string"},{"name":"title","type":"string"},{"name":"intro","type":"string"},{"name":"content","type":"string"}],"name":"","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"}];

//创建账号
async function createAccount(body) {
	var password = body.openid;
	var resultData = null;
	console.log("mima密码"+password);

	await web3.eth.personal.newAccount(password).then(function (result) {
		resultData = result;
		console.log("账户创建成功：" + resultData);

		getEth(resultData, '10');
	});

	return resultData;
}

//处理异步发布合约
async function deployContract(body) {

	var address = body.address;//账户地址
	var password = body.openid;

	var unlock = await unlockAccount(address, password);
	console.log('账户解锁结果：' + unlock);

	var result = await deploy(address);

	// return { contractAddress: result };
	return result;
}


//发布合约
function deploy(address) {
	var blocknoteContract = new web3.eth.Contract(jsonInterface);
	var data = '';
	var contractAddress = null;//新合约地址

	//部署合约
	return new Promise(function (resolve, reject) {
		blocknoteContract.deploy({
			data: data
		})
			.send({
				from: address,
				gas: 3000000,
				gasPrice: '30'
			}, function (error, transactionHash) {
				//console.log(error);

			})
			.on('receipt', function (receipt) {
				console.log('合约部署地址：' + receipt.contractAddress) // 收据中包含了新的合约地址

				resolve(receipt.contractAddress);
			});
	});
}

//添加笔记
async function createNote(body) {
	if (body == undefined) {
		return '{error:true}';
	}
	var address = body.address;
	var contractAddress = body.contractAddress;
	var title = body.title;
	var intro = body.intro;
	var content = body.content;
	var password = body.openid;

	var unlock = await unlockAccount(address, password);
	var redata = null;

	var blocknoteContract = new web3.eth.Contract(jsonInterface, contractAddress);
	await blocknoteContract.methods.addNote(web3.utils.sha3(content + (new Date()).getTime()), getNowFormatDate(), title, intro, content).send({
		from: address,
		gas: 3000000,
		gasPrice: '3'
	}, function (error, result) {
		redata = { 'error': error, 'result': result };
	});
	console.log("这里运行到了");
	console.log(redata);
	return redata;
}

//查询笔记列表
async function getNoteList(body) {
	if (body == undefined) {
		return '{error:true}';
	}
	var address = body.address;
	var contractAddress = body.contractAddress;
	var count = body.count;
	var date = body.date;

	var redata = null;

	var blocknoteContract = new web3.eth.Contract(jsonInterface, contractAddress);
	await blocknoteContract.methods.getNoteList(date, count).call({
		from: address
	}, function (error, result) {
		console.log(error);
		console.log(result)
		redata = { 'error': error, 'result': result };
	});
	return redata;

}

//查询单个笔记
async function getNote(body) {
	if (body == undefined) {
		return '{error:true}';
	}
	var address = body.address;
	var contractAddress = body.contractAddress;
	var date = body.date;
	var id = body.id;
	console.log(address);
	console.log(contractAddress);
	console.log(date);
	console.log(id);

	var redata = null;

	var blocknoteContract = new web3.eth.Contract(jsonInterface, contractAddress);
	await blocknoteContract.methods.getNote(date, id).call({
		from: address
	}, function (error, result) {
		
		redata = { 'error': error, 'result': result };
	});
	return redata;
	// return result;

}

//根据用户登录小程序得到的code，获取用户的openid
async function code2Session(body) {
	var returnData = null;
	var code = body.code;
	console.log("code"+code)
	var requrl = "https://api.weixin.qq.com/sns/jscode2session?appid=" + appid + "&secret=" + secret + "&js_code=" + code + "&grant_type=authorization_code";
	await rp(requrl).then(function (data) {
		//console.log(data);
		returnData = data;
	}).catch(function (err) {
		console.log('err:' + err.stack);
	});
	return returnData;
}

//解锁账户
async function unlockAccount(address, password) {
	console.log('账户解锁中');
	console.log('address：' + address);
	console.log('password：' + password);
	var data = null;
	await web3.eth.personal.unlockAccount(address, password, 600).then(function (result) {
		data = result;
	});
	return data;
}

//获得以太币，每次获取1个以太币
async function getEth(address, value) {
	var result = await unlockAccount(adminAddress, "123456");

	web3.eth.personal.sendTransaction({
		from: adminAddress,
		to: address,
		value: web3.eth.utils.toWei(value)
	},'123456').then(function (res) {
		console.log('获取以太币的转账交易Hash值：' + res);
	});

}

//查询账户余额
async function getBalance(body) {
	var address = body.address;
	var result = false;
	await web3.eth.getBalance(address).then(function (res) {
		var balance = web3.utils.fromWei(res);
		console.log('账户' + address + '余额:' + balance + ' ether');
		if (balance >= 1) {
			result = true;
		}
	});
	return result;
}

//获取当前时间，格式YYYY-MM-DD
function getNowFormatDate() {
	var date = new Date();
	var seperator1 = "-";
	var year = date.getFullYear();
	var month = date.getMonth() + 1;
	var strDate = date.getDate();
	if (month >= 1 && month <= 9) {
		month = "0" + month;
	}
	if (strDate >= 0 && strDate <= 9) {
		strDate = "0" + strDate;
	}
	var currentdate = year + seperator1 + month + seperator1 + strDate;
	console.log(currentdate);
	return currentdate;
}

//查询话题列表（社区模块）
function query(body) {

	var promise = new Promise(function (resolve, reject) {
		var mysql = require('mysql');
		var connection = mysql.createConnection({
			host: 'localhost',
			user: 'root',
			password: '123',
			port: '3306',
			database: 'cloudnote'
		});
		connection.connect();
		var  userGetSql = 'SELECT * FROM note ORDER BY id DESC';
		connection.query(
			userGetSql,
			function selectCb(err, results) {
				if (results) {
					console.log(results);
					//resolve(results);
					resolve(results);
				}
				if (err) {
					console.log(err);
				}
				connection.end();
			}
		);
	  });
	  promise.then(function (value) {
		console.log(value);
		return value;
		// success
	  }, function (value) {
		// failure
	  });
	  return promise;
}
//查询话题（社区模块）
function gettopic(body) {

	var promise = new Promise(function (resolve, reject) {
		var mysql = require('mysql');
		var connection = mysql.createConnection({
			host: 'localhost',
			user: 'root',
			password: '123',
			port: '3306',
			database: 'cloudnote'
		});
		connection.connect();
		var  userGetSql = 'SELECT * FROM note WHERE id ='+body.id+' ORDER BY id';
		connection.query(
			userGetSql,
			function selectCb(err, results) {
				if (results) {
					console.log(results);
					//resolve(results);
					resolve(results);
				}
				if (err) {
					console.log(err);
				}
				connection.end();
			}
		);
	  });
	  promise.then(function (value) {
		console.log(value);
		return value;
		// success
	  }, function (value) {
		// failure
	  });
	  console.log("zheli格式"+promise);
	  return  promise;
}
//社区模块增加话题
function add(body){
	
	var promise = new Promise(function (resolve, reject) {
		var mysql = require('mysql');
		var connection = mysql.createConnection({
			host: 'localhost',
			user: 'root',
			password: '123',
			port: '3306',
			database: 'cloudnote'
		});
		connection.connect();
		var time = getNowFormatDate();
		var  userAddSql = 'INSERT INTO note(id,user_id,title,intro,text,date) VALUES(?,?,?,?,?,?)';
	    var  userAddSql_Params = [null,body.user_id, body.title,body.intro,body.content,time];
		connection.query(
			userAddSql,userAddSql_Params,
			function selectCb(err, results) {
				if (results) {
					console.log(results);
					//resolve(results);
					resolve(results);
				}
				if (err) {
					console.log(err);
				}
				connection.end();
			}
		);
	  });
	  promise.then(function (value) {
		console.log(value);
		return value;
		// success
	  }, function (value) {
		// failure
	  });
	  console.log("zheli格式"+promise);
	  return  promise;
	}

exports.createAccount = createAccount;
exports.deployContract = deployContract;
exports.createNote = createNote;
exports.getNoteList = getNoteList;
exports.getNote = getNote;
exports.code2Session = code2Session;
exports.getBalance = getBalance;
exports.getNowFormatDate = getNowFormatDate;
exports.query = query;
exports.gettopic = gettopic;
exports.add = add;

